name: Manual Build and Release

# 手动触发的构建和发布工作流
# 允许用户通过GitHub界面手动触发构建
on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - release
          - test-only
      version_type:
        description: '版本升级类型 (仅在release时使用)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      platforms:
        description: '构建平台'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - macos
          - linux
      python_version:
        description: 'Python版本'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean
      create_draft:
        description: '创建草稿发布 (仅在release时使用)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.11' }}
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'build' }}

jobs:
  # 代码质量检查
  quality:
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    runs-on: ubuntu-latest
    name: 代码质量检查
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 缓存pip依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety
        
    - name: 代码格式检查
      run: |
        echo "检查代码格式..."
        black --check src/ || echo "::warning::代码格式需要修复"
        
    - name: 导入排序检查
      run: |
        echo "检查导入排序..."
        isort --check-only src/ || echo "::warning::导入排序需要修复"
        
    - name: Flake8检查
      run: |
        echo "运行flake8..."
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 || echo "::warning::发现代码问题"
        
    - name: 类型检查
      run: |
        echo "类型检查..."
        mypy src/ --ignore-missing-imports || echo "::warning::发现类型问题"
        
    - name: 安全检查
      run: |
        echo "安全检查..."
        bandit -r src/ -f json -o bandit-report.json || echo "::warning::发现安全问题"
        safety check --json --output safety-report.json || echo "::warning::发现依赖安全问题"
        
    - name: 上传安全报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 测试
  test:
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    
    name: 测试 (${{ matrix.platform }})
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装系统依赖 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-xfixes0
          
    - name: 安装系统依赖 (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install qt6
        
    - name: 缓存pip依赖
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-test-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: 运行测试
      run: |
        if [ -d "tests" ] || [ -d "test" ]; then
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing || echo "::warning::测试失败"
        else
          echo "::warning::未找到测试目录，跳过测试"
        fi
      shell: bash
      
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 构建
  build:
    needs: [quality, test]
    if: always() && (needs.quality.result == 'success' || needs.quality.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            enabled: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'linux' }}
          - os: windows-latest
            platform: windows
            enabled: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'windows' }}
          - os: macos-latest
            platform: macos
            enabled: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'macos' }}
    
    name: 构建 (${{ matrix.platform }})
    
    steps:
    - name: 跳过构建
      if: ${{ !matrix.enabled }}
      run: echo "跳过 ${{ matrix.platform }} 平台构建"
      
    - name: 检出代码
      if: ${{ matrix.enabled }}
      uses: actions/checkout@v4
      
    - name: 设置Python
      if: ${{ matrix.enabled }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装系统依赖 (Ubuntu)
      if: matrix.enabled && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-xfixes0
          
    - name: 安装系统依赖 (macOS)
      if: matrix.enabled && matrix.os == 'macos-latest'
      run: |
        brew install qt6
        
    - name: 缓存pip依赖
      if: ${{ matrix.enabled }}
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      if: ${{ matrix.enabled }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 构建应用程序
      if: ${{ matrix.enabled }}
      run: |
        if [ -f "scripts/build_automation.py" ]; then
          python scripts/build_automation.py
        elif [ -f "build.py" ]; then
          python build.py
        else
          echo "使用默认PyInstaller构建..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            python -m PyInstaller --onefile --windowed --name ScreenRecorder main.py
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            python -m PyInstaller --onefile --windowed --name ScreenRecorder main.py
          else
            python -m PyInstaller --onefile --name ScreenRecorder main.py
          fi
        fi
      shell: bash
      
    - name: 创建便携版包 (Windows)
      if: matrix.enabled && matrix.platform == 'windows'
      run: |
        mkdir -p portable
        cp dist/ScreenRecorder.exe portable/
        cp README.md portable/ || echo "README.md not found"
        cp LICENSE portable/ || echo "LICENSE not found"
        cd portable
        7z a ../ScreenRecorder-Windows-Portable.zip *
      shell: bash
      
    - name: 创建便携版包 (macOS)
      if: matrix.enabled && matrix.platform == 'macos'
      run: |
        mkdir -p portable
        cp dist/ScreenRecorder portable/
        cp README.md portable/ || echo "README.md not found"
        cp LICENSE portable/ || echo "LICENSE not found"
        cd portable
        tar -czf ../ScreenRecorder-macOS-Portable.tar.gz *
        
    - name: 创建便携版包 (Linux)
      if: matrix.enabled && matrix.platform == 'linux'
      run: |
        mkdir -p portable
        cp dist/ScreenRecorder portable/
        cp README.md portable/ || echo "README.md not found"
        cp LICENSE portable/ || echo "LICENSE not found"
        cd portable
        tar -czf ../ScreenRecorder-Linux-Portable.tar.gz *
        
    - name: 上传构建产物
      if: ${{ matrix.enabled }}
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.platform }}
        path: |
          dist/
          *.zip
          *.tar.gz
          *.dmg

  # 发布
  release:
    if: ${{ github.event.inputs.build_type == 'release' }}
    needs: [build]
    runs-on: ubuntu-latest
    name: 创建发布
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 下载所有构建产物
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: 整理构建产物
      run: |
        mkdir -p release_assets
        find artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.tar.gz" -o -name "*.zip" -o -name "ScreenRecorder" \) -exec cp {} release_assets/ \;
        ls -la release_assets/
        
    - name: 生成版本号
      id: version
      run: |
        if [ -f "scripts/auto_release.py" ]; then
          python scripts/auto_release.py --type ${{ github.event.inputs.version_type }} --dry-run
          VERSION=$(python scripts/auto_release.py --type ${{ github.event.inputs.version_type }} --get-version)
        else
          # 简单的版本生成逻辑
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "当前版本: $CURRENT_VERSION"
          
          # 解析版本号
          VERSION_NUM=${CURRENT_VERSION#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # 根据类型升级版本
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          VERSION="v$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "新版本: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: 创建Git标签
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}
        
    - name: 生成发布说明
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🎉 ScreenRecorder ${{ steps.version.outputs.version }}
        
        ### ✨ 新功能
        - 手动触发构建和发布
        - 跨平台支持 (Windows, macOS, Linux)
        - 自动化构建流程
        
        ### 📦 下载
        
        #### Windows
        - `ScreenRecorder.exe` - Windows可执行文件
        - `ScreenRecorder-Windows-Portable.zip` - Windows便携版
        
        #### macOS
        - `ScreenRecorder` - macOS可执行文件
        - `ScreenRecorder-macOS-Portable.tar.gz` - macOS便携版
        
        #### Linux
        - `ScreenRecorder` - Linux可执行文件
        - `ScreenRecorder-Linux-Portable.tar.gz` - Linux便携版
        
        ### 📋 系统要求
        - Python ${{ env.PYTHON_VERSION }}+
        - 支持的操作系统: Windows 10+, macOS 10.15+, Ubuntu 20.04+
        
        ### 🔧 安装说明
        1. 下载对应平台的文件
        2. 解压（如果是压缩包）
        3. 运行可执行文件
        
        ---
        
        **构建信息:**
        - 构建时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Python版本: ${{ env.PYTHON_VERSION }}
        - 构建平台: ${{ github.event.inputs.platforms }}
        - 构建类型: ${{ github.event.inputs.build_type }}
        EOF
        
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
        
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ScreenRecorder ${{ steps.version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.release_notes_file }}
        files: release_assets/*
        draft: ${{ github.event.inputs.create_draft == 'true' }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 通知
  notify:
    if: always()
    needs: [quality, test, build, release]
    runs-on: ubuntu-latest
    name: 构建通知
    
    steps:
    - name: 构建成功通知
      if: ${{ needs.build.result == 'success' }}
      run: |
        echo "✅ 构建成功完成！"
        echo "构建类型: ${{ github.event.inputs.build_type }}"
        echo "构建平台: ${{ github.event.inputs.platforms }}"
        echo "Python版本: ${{ env.PYTHON_VERSION }}"
        
    - name: 发布成功通知
      if: ${{ needs.release.result == 'success' }}
      run: |
        echo "🎉 发布成功创建！"
        echo "查看发布: ${{ github.server_url }}/${{ github.repository }}/releases"
        
    - name: 构建失败通知
      if: ${{ needs.build.result == 'failure' || needs.release.result == 'failure' }}
      run: |
        echo "❌ 构建或发布失败！"
        echo "请检查构建日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"