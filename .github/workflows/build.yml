name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.11']

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio xvfb

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Try CI requirements first
        pip install -r requirements-ci.txt || echo "CI requirements failed"
        # Ensure PyInstaller is available
        pip install PyInstaller || echo "PyInstaller failed"

    - name: Create resources directory
      shell: bash
      run: |
        mkdir -p resources

    - name: Run tests (if test files exist)
      run: |
        if [ -f "test_installation.py" ]; then
          python test_installation.py
        fi
      shell: bash
      continue-on-error: true

    - name: Build executable
      run: |
        python scripts/ci_build_en.py
      continue-on-error: true

    - name: Check build output (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Checking build output..."
        if (Test-Path "dist") {
          Write-Host "✅ dist directory exists"
          Get-ChildItem -Path "dist" -Recurse | Format-Table Name, Length, LastWriteTime
          $fileCount = (Get-ChildItem -Path "dist" -Recurse -File).Count
          Write-Host "Total files in dist: $fileCount"
        } else {
          Write-Host "❌ dist directory not found"
        }

    - name: Check build output (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "Checking build output..."
        if [ -d "dist" ]; then
          echo "✅ dist directory exists"
          ls -la dist/
          echo "Total files in dist: $(find dist -type f | wc -l)"
        else
          echo "❌ dist directory not found"
        fi

    - name: Check if build succeeded
      run: |
        echo "=== Build Success Check ==="
        if [ -d "dist" ] && [ "$(find dist -type f | wc -l)" -gt 0 ]; then
          echo "✅ Build appears successful - dist directory contains files"
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "❌ Build appears to have failed - no files in dist directory"
          echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Upload Windows artifact
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ScreenRecorder-Windows-${{ matrix.python-version }}
        path: dist/
        if-no-files-found: ignore

    - name: Upload macOS artifact
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ScreenRecorder-macOS-${{ matrix.python-version }}
        path: dist/
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        merge-multiple: true

    - name: List downloaded artifacts
      run: |
        echo "=== Artifact Analysis ==="
        echo "Current directory:"
        pwd
        ls -la

        echo -e "\n=== Artifacts directory structure ==="
        if [ -d "artifacts" ]; then
          echo "Artifacts directory exists"
          ls -la artifacts/
          echo -e "\n=== All files in artifacts (recursive) ==="
          find artifacts/ -type f -ls 2>/dev/null || echo "No files found"
          echo -e "\n=== All directories in artifacts ==="
          find artifacts/ -type d -ls 2>/dev/null || echo "No directories found"
          echo -e "\n=== Artifacts tree structure ==="
          tree artifacts/ 2>/dev/null || find artifacts/ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
        else
          echo "❌ Artifacts directory not found"
        fi

    - name: Create release archives
      run: |
        # 检查所有可能的Windows构建目录
        WINDOWS_CREATED=false
        for dir in "artifacts/ScreenRecorder-Windows-3.11" "artifacts/ScreenRecorder-Windows" "artifacts"/*Windows*; do
          if [ -d "$dir" ] && [ "$(ls -A "$dir" 2>/dev/null)" ]; then
            echo "Found Windows build directory: $dir"
            cd "$dir"
            zip -r "$(pwd | sed 's|.*/||')-Windows.zip" .
            mv *.zip ../../ScreenRecorder-Windows.zip 2>/dev/null || cp *.zip ../../ScreenRecorder-Windows.zip 2>/dev/null || true
            cd - > /dev/null
            if [ -f "ScreenRecorder-Windows.zip" ]; then
              echo "✅ Created ScreenRecorder-Windows.zip"
              WINDOWS_CREATED=true
              break
            fi
          fi
        done

        if [ "$WINDOWS_CREATED" = false ]; then
          echo "❌ Windows build not found or empty"
          echo "Available artifacts:"
          find artifacts -name "*Windows*" -type d 2>/dev/null || echo "No Windows artifacts"
        fi

        # 检查所有可能的macOS构建目录
        MACOS_CREATED=false
        for dir in "artifacts/ScreenRecorder-macOS-3.11" "artifacts/ScreenRecorder-macOS" "artifacts"/*macOS*; do
          if [ -d "$dir" ] && [ "$(ls -A "$dir" 2>/dev/null)" ]; then
            echo "Found macOS build directory: $dir"
            cd "$dir"
            tar -czf "$(pwd | sed 's|.*/||')-macOS.tar.gz" .
            mv *.tar.gz ../../ScreenRecorder-macOS.tar.gz 2>/dev/null || cp *.tar.gz ../../ScreenRecorder-macOS.tar.gz 2>/dev/null || true
            cd - > /dev/null
            if [ -f "ScreenRecorder-macOS.tar.gz" ]; then
              echo "✅ Created ScreenRecorder-macOS.tar.gz"
              MACOS_CREATED=true
              break
            fi
          fi
        done

        if [ "$MACOS_CREATED" = false ]; then
          echo "❌ macOS build not found or empty"
          echo "Available artifacts:"
          find artifacts -name "*macOS*" -type d 2>/dev/null || echo "No macOS artifacts"
        fi

        # 列出创建的文件
        echo "📦 Release files created:"
        ls -la *.zip *.tar.gz 2>/dev/null || echo "No release files found"
        
    - name: Check files before release
      run: |
        echo "Files in current directory:"
        ls -la
        echo "Checking for release files:"
        [ -f "ScreenRecorder-Windows.zip" ] && echo "✅ Windows zip found" || echo "❌ Windows zip not found"
        [ -f "ScreenRecorder-macOS.tar.gz" ] && echo "✅ macOS tar.gz found" || echo "❌ macOS tar.gz not found"

    - name: Prepare release files list
      run: |
        echo "Preparing release files list..."
        RELEASE_FILES=""
        if [ -f "ScreenRecorder-Windows.zip" ]; then
          RELEASE_FILES="$RELEASE_FILES ScreenRecorder-Windows.zip"
          echo "✅ Windows package will be included"
        else
          echo "⚠️ Windows package not available"
        fi

        if [ -f "ScreenRecorder-macOS.tar.gz" ]; then
          RELEASE_FILES="$RELEASE_FILES ScreenRecorder-macOS.tar.gz"
          echo "✅ macOS package will be included"
        else
          echo "⚠️ macOS package not available"
        fi

        echo "RELEASE_FILES=$RELEASE_FILES" >> $GITHUB_ENV
        echo "Files to release: $RELEASE_FILES"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ScreenRecorder-Windows.zip
          ScreenRecorder-macOS.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
        name: Release ${{ github.ref_name }}
        body: |
          ## 🎉 现代录屏工具 ${{ github.ref_name }}

          ### 📦 下载
          ${{ hashFiles('ScreenRecorder-Windows.zip') != '' && '- **Windows**: ScreenRecorder-Windows.zip' || '- **Windows**: 构建失败，请从源码运行' }}
          ${{ hashFiles('ScreenRecorder-macOS.tar.gz') != '' && '- **macOS**: ScreenRecorder-macOS.tar.gz' || '- **macOS**: 构建失败，请从源码运行' }}

          ### ✨ 主要功能
          - 🎥 高质量屏幕录制
          - 🎵 同步音频录制
          - 🖥️ 多显示器支持
          - 📱 区域选择录制
          - ⏯️ 实时录制控制

          ### 🚀 安装说明
          #### 预编译版本
          1. 下载对应平台的压缩包
          2. 解压到任意目录
          3. 运行可执行文件

          #### 从源码运行
          ```bash
          git clone https://github.com/lyman86/ScreenRecordeTool.git
          cd ScreenRecordeTool
          pip install -r requirements.txt
          python main.py
          ```

          ---
          🤖 自动构建 | 构建ID: ${{ github.run_id }}
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
