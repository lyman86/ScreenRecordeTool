name: Enhanced Build and Release

# 触发条件
on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本升级类型'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: '是否创建Release'
        required: true
        default: true
        type: boolean

# 环境变量
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt

    - name: Code formatting check (Black)
      run: black --check --diff src/

    - name: Import sorting check (isort)
      run: isort --check-only --diff src/

    - name: Linting (flake8)
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking (mypy)
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true

    - name: Security check (bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Dependency security check (safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 测试
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libqt6-widgets6 \
          qt6-base-dev \
          libxcb-xinerama0 \
          xvfb

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install qt6

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb

    - name: Run tests (Linux)
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Run tests (Windows/macOS)
      if: runner.os != 'Linux'
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 构建
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [quality, test]
    strategy:
      matrix:
        include:
          - os: windows-latest
            python-version: '3.11'
            artifact-name: 'Windows'
          - os: macos-latest
            python-version: '3.11'
            artifact-name: 'macOS'
          - os: ubuntu-latest
            python-version: '3.11'
            artifact-name: 'Linux'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libqt6-widgets6 \
          qt6-base-dev \
          libxcb-xinerama0

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install qt6 create-dmg

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-pip-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with automation script
      run: python scripts/build_automation.py

    - name: Create installer (Windows)
      if: runner.os == 'Windows'
      run: |
        # 可以在这里添加NSIS或其他安装程序创建工具
        echo "Windows installer creation would go here"

    - name: Sign application (macOS)
      if: runner.os == 'macOS'
      run: |
        # 可以在这里添加代码签名
        echo "macOS code signing would go here"

    - name: Create AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        # 可以在这里添加AppImage创建
        echo "AppImage creation would go here"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ScreenRecorder-${{ matrix.artifact-name }}
        path: dist/
        retention-days: 30

  # 发布
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # 重命名和组织文件
        find artifacts/ -name "*.exe" -exec cp {} release-assets/ \;
        find artifacts/ -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts/ -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts/ -name "*.zip" -exec cp {} release-assets/ \;
        
        # 生成发布说明
        echo "## ScreenRecorder Release ${GITHUB_REF#refs/tags/}" > release-notes.md
        echo "" >> release-notes.md
        echo "### 🎉 新功能" >> release-notes.md
        echo "- 跨平台屏幕录制工具" >> release-notes.md
        echo "- 支持多种视频格式和质量设置" >> release-notes.md
        echo "- 区域选择录制" >> release-notes.md
        echo "- 音频录制支持" >> release-notes.md
        echo "- 热键控制" >> release-notes.md
        echo "" >> release-notes.md
        echo "### 📦 下载说明" >> release-notes.md
        echo "- **Windows**: 下载 \`.exe\` 文件或便携版" >> release-notes.md
        echo "- **macOS**: 下载 \`.dmg\` 文件" >> release-notes.md
        echo "- **Linux**: 下载 \`.tar.gz\` 压缩包" >> release-notes.md
        echo "" >> release-notes.md
        echo "### 🔧 系统要求" >> release-notes.md
        echo "- Windows 10+, macOS 10.14+, 或 Ubuntu 18.04+" >> release-notes.md
        echo "- Python 3.9+ (如果从源码运行)" >> release-notes.md
        
        # 添加变更日志
        if [ -f CHANGELOG.md ]; then
          echo "" >> release-notes.md
          echo "### 📋 详细变更" >> release-notes.md
          head -n 50 CHANGELOG.md >> release-notes.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: ScreenRecorder ${{ github.ref_name }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署文档
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

    - name: Build documentation
      run: |
        # 如果有mkdocs.yml文件，构建文档
        if [ -f mkdocs.yml ]; then
          mkdocs build
        else
          # 创建简单的文档站点
          mkdir -p site
          cp README.md site/index.md
          cp RELEASE_NOTES.md site/
          cp GITHUB_SETUP_GUIDE.md site/
        fi

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # 通知
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true')
    
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "🎉 Release created successfully!"
        echo "📦 Version: ${GITHUB_REF#refs/tags/}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"

    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "❌ Release creation failed!"
        echo "Please check the workflow logs for details."